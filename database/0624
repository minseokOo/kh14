-- 테이블(table)
-- 데이터를 저장할 수 있는 도구(데이터베이스 객체 중 하나)
-- 생성 시 이름과 형태를 지정해야 한다
-- 가변 문자열 (varchar2), 고정문자열(char)은 byte 크기를 지정
-- 숫자(number)는 자리 수를 지정하며 필수로 해야하는 것은 아님
-- 날짜(date)는 연/월/일/시/분/초를 모두 사용할 때 쓴다.

CREATE table MEDALIST (
MEDALIST_name varchar2(21),
coffeeShop_type varchar2(9),
coffeeShop_price number,
coffeeShop_event char(9)
);


CREATE table coffeeShop(
coffeeShop_name varchar2(15),
coffeeShop_type varchar2(9),
coffeeShop_price number,
coffeeShop_event char(9)
);
DROP table coffeeShop;

-- 상품 주문 정보
-- not null을 항목에 적으면 "필수항목"이 된다.
-- unique를 항목에 적으면 "중복불가" 처리가 된다.
-- check항목을 작성하면 데이터 조건을 적을 수 있다.(나중에 써도 됨)
-- default를 작성하면 "미입력시 기본값"을 지정할 수 있다
CREATE table shop(
shop_name varchar2(60) not null unique,
shop_type char(6) not null,
shop_price number not null,
shop_discount number(3) default 0 not null,
shop_count number default 1 not null,
shop_delivery char(1),
check(shop_price >= 0),
check(shop_count >= 1),
--check(shop_discount >= 0 and order shop_discount <= 100)
check(shop_discount BETWEEN 0 and 100),
--check(shop_type ='라면' OR shop_type = '제과'
check(shop_type in ('라면', '제과')),
check(shop_delivery = 'Y'),
check(REGEXP_LIKE(shop_name, '^[가-힣A-Za-z0-9]{1,20}$')) 
);
DROP table shop;

--데이터 추가 명령
--INSERT INTO shop(항목) values(값);
insert into shop(
	shop_name, shop_type, shop_price, shop_discount, shop_count, shop_delivery)
	values ('비김면', '라면', 16800, 0, 2,'Y');
--데이터 조회 명령
select * from shop;


CREATE table phone(
phone_name varchar2(60) not null,
phone_telecom char(2) not null,
phone_price number,
phone_promo number(2) default 0 not null,
check(phone_telecom in ('SK', 'KT', 'LG')),
check(phone_price > 0),
check(phone_promo in ('24', '30', '0' )),
check(REGEXP_LIKE(phone_name, '^[가-힣A-Za-z0-9\s]+$')) 
);
DROP table phone;

--데이터 추가 명령
insert into phone(
	PHONE_NAME, PHONE_TELECOM, PHONE_PRICE)
	values ('갤럭시Fold4', 'SK', '180');
	insert into phone(PHONE_NAME, PHONE_TELECOM, PHONE_PRICE, PHONE_PROMO)
	values ('갤럭시Fold4', 'KT', '175', 24);
	insert into phone(PHONE_NAME, PHONE_TELECOM, PHONE_PRICE, PHONE_PROMO)
	values ('아이폰15', 'LG', '200', 30);
	insert into phone(PHONE_NAME, PHONE_TELECOM, PHONE_PRICE, PHONE_PROMO)
	values ('아이폰15', 'SK', '199', 0);

SELECT * FROM PHONE;

--기본키 (Primary key)
-- 테이블을 대표하는 항목(반장)
-- 단 하나만 지정할 수 있으며 일반적으로 번호를 지정
-- 번호는 직접 작성하는 것이 아니라 시퀀스(sequence) 도구 사용
-- 필수이며, 유일해야하며, 변하지 않아야 한다.
DROP table pokemon;
CREATE table pokemon (
pokemon_no number primary key,
pokemon_name varchar2(30) not null,
pokemon_type varchar2(12) not null
);
--시퀀스 생성 구문
CREATE sequence pokemon_seq cycle;
DROP sequence pokemon_seq;
SELECT * FROM user_sequences;

INSERT INTO pokemon(pokemon_no, pokemon_name, pokemon_type)
values(pokemon_seq.nextval, '피카츄', '전기');
SELECT * FROM pokemon;

DROP table board;
DROP sequence board_seq;
DROP sequence read_seq;
CREATE table board (
board_no number primary Key,
board_title varchar2(300) not null,
board_content varchar2(4000) not null,
--board_content clob,
board_writer varchar2(20) ,
board_readcount number default 0 not null,
board_time date default sysdate not null,
check(regexp_like (board_title, '^[가-힣]{1,100}$')),
check(regexp_like (board_writer, '^[a-z][a-z0-9]{5,19}$')),
check(board_readcount >= 0)
);


CREATE sequence board_seq;
CREATE sequence read_seq;

INSERT INTO board(board_no, board_title, board_content, board_writer, board_readcount)
values(board_seq.nextval,'아아','가나다라adsfa', 'asdf123', read_seq.nextval);
SELECT * FROM board;


-- 도서대여 정보 테이블
DROP  table check_out_book;
CREATE table check_out_book(
check_no number primary key,
check_name varchar2(90) not null,
check_begin date not null,
check_end date not null,
check_price number not null

);

CREATE sequence check_out_book_seq;
DROP sequence check_out_book_seq;

--date의 계산 단위는 "일"이다.
INSERT INTO check_out_book(check_no, check_name, check_begin, check_end, check_price)

values (check_out_book_seq.nextval, '불변의 법칙', 
sysdate, sysdate+3/24,
22500);

SELECT * FROM check_out_book;


drop table emp;
CREATE table emp(
emp_no number primary key,
emp_name varchar2(21) not null,
emp_dept char(9) not null,
emp_date date not null,
emp_rank varchar2(9) not null,
emp_sal number not null,

check (regexp_like (emp_name, '^[가-힣]{2,7}$')),
check(emp_dept in ('기획팀', '영업팀', '총무팀', '개발팀', '운영팀')),
check(emp_rank in ('인턴', '사원', '주임', '대리', '과장', '부장', '이사', '부사장', '사장')),
check(emp_sal > 0)

);

CREATE sequence emp_no_seq;
drop sequence emp_no_seq;

INSERT INTO emp(emp_no, emp_name, emp_dept, emp_date, emp_rank, emp_sal)
values (emp_no_seq.nextval, '김민석', '기획팀', 
			to_date('2024-05-22', 'yyyy-mm-dd'),
			--sysdate,
		'인턴', 2000000);
		
SELECT * FROM emp;

DROP table book;
CREATE table book(
book_id number primary key,
book_title varchar2(300) not null,
book_author varchar2(90),
book_publication_date date,
book_price number not null,
book_publisher varchar2(90),
book_page_count number not null,
book_genre varchar2(20) not null,

check (regexp_like(book_title, '^[가-힣]{1,100}$')),
check (regexp_like(book_author, '^[가-힣]{1,30}$')),
check (book_price > 0),
check (regexp_like(book_publisher, '^[가-힣]{1,30}$')),
check (book_page_count >0),
check (book_genre in ('추리', 'SF', '로맨스', '전문서적'))
);

CREATE sequence book_id_seq;
DROP sequence book_id_seq;

INSERT INTO book(book_id, book_title, book_author, book_publication_date, 
							book_price, book_publisher, book_page_count, book_genre)

values (book_id_seq.nextval, '우주전쟁',
'허버트 조지 웰즈', 
to_date('2005-06-10'),
			9000, '황금가지',
		313, 'sf');

SELECT * FROM book;

DROP table member;
CREATE table MEMBER(
member_id varchar2(20) primary key,
member_pw varchar2(16) not null,
member_nickname varchar2(30) not null unique,
member_birth char(10),
member_contact char(11),
member_email varchar2(60) not null,
member_level varchar2(12) default '일반회원' not null,
member_point number default 0 not null,
member_post varchar2(6),
member_address1 varchar2(300),
member_address2 varchar2(300),
member_join date default sysdate not null,
member_login date,

check (regexp_like(member_id, '^[a-z][a-z0-9]{4,19}$')),
check (regexp_like(member_pw, '^[A-Za-z0-9!@#$]{8,16}$')),
CHECK (regexp_like(member_pw, '[A-Z]+')),
CHECK (regexp_like(member_pw, '[a-z]+')),
CHECK (regexp_like(member_pw, '[0-9]+')),
CHECK (regexp_like(member_pw, '[!@#$]+')),
check (regexp_like(member_nickname, '^[가-힣0-9]{2,10}$')),
check (member_level in ('일반회원', '우수회원', '관리자')),
check (member_point >=0),
check ((member_post is null and member_address1 is null and member_address2 is null)
OR 
 (member_post is not null and member_address1 is not null and member_address2 is not null)
)
);

INSERT INTO member(
	member_id, member_pw, member_nickname, member_email)
	
drop table product;
create table product(
no number primary key,
name varchar2(30) not null,
type varchar2(15) check(type in ('과자','아이스크림','주류','사탕', '초콜릿')),
price number,
made date,
expire date
);

INSERT INTO product VALUES (1, '스크류바', '아이스크림', 1200, TO_DATE('2022-05-01', 'YYYY-MM-DD'), TO_DATE('2022-10-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (2, '마이쮸', '사탕', 900, TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (3, '초코파이', '과자', 3000, TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (4, '맛동산', '과자', 2200, TO_DATE('2022-02-01', 'YYYY-MM-DD'), TO_DATE('2022-10-20', 'YYYY-MM-DD'));
INSERT INTO product VALUES (5, '참이슬', '주류', 1000, TO_DATE('2022-01-05', 'YYYY-MM-DD'), TO_DATE('2022-04-05', 'YYYY-MM-DD'));
INSERT INTO product VALUES (6, '처음처럼', '주류', 1000, TO_DATE('2022-03-15', 'YYYY-MM-DD'), TO_DATE('2022-08-15', 'YYYY-MM-DD'));
INSERT INTO product VALUES (7, '바나나킥', '과자', 1500, TO_DATE('2022-05-03', 'YYYY-MM-DD'), TO_DATE('2022-06-03', 'YYYY-MM-DD'));
INSERT INTO product VALUES (8, '빠삐코', '아이스크림', 1000, TO_DATE('2023-12-01', 'YYYY-MM-DD'), TO_DATE('2024-06-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (9, '멘토스', '사탕', 1200, TO_DATE('2023-03-20', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));
INSERT INTO product VALUES (10, '오레오', '과자', 2100, TO_DATE('2023-06-01', 'YYYY-MM-DD'), TO_DATE('2024-06-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (11, '포카칩', '과자', 1500, TO_DATE('2022-05-05', 'YYYY-MM-DD'), TO_DATE('2023-05-05', 'YYYY-MM-DD'));
INSERT INTO product VALUES (12, '칸쵸', '과자', 1000, TO_DATE('2022-06-10', 'YYYY-MM-DD'), TO_DATE('2023-06-10', 'YYYY-MM-DD'));
INSERT INTO product VALUES (13, '허니버터칩', '과자', 1700, TO_DATE('2022-07-01', 'YYYY-MM-DD'), TO_DATE('2023-07-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (14, '새우깡', '과자', 1200, TO_DATE('2022-08-01', 'YYYY-MM-DD'), TO_DATE('2023-08-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (15, '칙촉', '과자', 2500, TO_DATE('2022-09-01', 'YYYY-MM-DD'), TO_DATE('2023-09-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (16, '가나초콜릿', '초콜릿', 2000, TO_DATE('2022-10-01', 'YYYY-MM-DD'), TO_DATE('2023-10-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (17, '빼빼로', '과자', 1500, TO_DATE('2022-11-11', 'YYYY-MM-DD'), TO_DATE('2023-11-11', 'YYYY-MM-DD'));
INSERT INTO product VALUES (18, '파이리', '사탕', 1000, TO_DATE('2022-12-01', 'YYYY-MM-DD'), TO_DATE('2023-12-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (19, '초코송이', '과자', 1200, TO_DATE('2023-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (20, '빈츠', '과자', 1300, TO_DATE('2023-02-01', 'YYYY-MM-DD'), TO_DATE('2024-02-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (21, '죠리퐁', '과자', 1400, TO_DATE('2023-03-01', 'YYYY-MM-DD'), TO_DATE('2024-03-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (22, '오징어집', '과자', 1500, TO_DATE('2023-04-01', 'YYYY-MM-DD'), TO_DATE('2024-04-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (23, '누네띠네', '과자', 1200, TO_DATE('2023-05-01', 'YYYY-MM-DD'), TO_DATE('2024-05-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (24, '포테토칩', '과자', 1600, TO_DATE('2023-06-01', 'YYYY-MM-DD'), TO_DATE('2024-06-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (25, '새콤달콤', '사탕', 1000, TO_DATE('2023-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (26, '카라멜콘', '과자', 1100, TO_DATE('2023-08-01', 'YYYY-MM-DD'), TO_DATE('2024-08-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (27, '오징어땅콩', '과자', 1500, TO_DATE('2023-09-01', 'YYYY-MM-DD'), TO_DATE('2024-09-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (28, '스니커즈', '초콜릿', 2000, TO_DATE('2023-10-01', 'YYYY-MM-DD'), TO_DATE('2024-10-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (29, '트윅스', '초콜릿', 2000, TO_DATE('2023-11-01', 'YYYY-MM-DD'), TO_DATE('2024-11-01', 'YYYY-MM-DD'));
INSERT INTO product VALUES (30, '킷캣', '초콜릿', 2100, TO_DATE('2023-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-01', 'YYYY-MM-DD'));

commit;
-- product 전체 조회
select * from product;

-- 상품명과 가격만 조회
select name, price from product;

-- 계산 결과를 항목으로 조회하는 것도 가능
-- (Q) 상품별로 유통기한이 얼마나 되는지 조회
select name, expire-made from product;

-- 별칭을 줄 수 있다
select name "이름", expire-made "유통기한" from product; --"" 쌍따옴표 사이엔 띄어쓰기가 들어갈 수 있다
select name 이름, expire-made 유통기한 from product; --자바에서 실행시키기엔 쌍따옴표가 없는게 더 좋다

-- (Q) 전부다 출력하면서 유통기한을 출력하려면?
--select *, expire-made 유통기한 from product; --error(*가 불명확)
select product.*, expire-made 유통기한 from product;


-- 조건(where)
-- 데이터를 전부 다 조회하는 것이 아니라 원하는 값만 필터링
-- 숫자, 문자, 날짜에 따라 자주 쓰는 조건이 달라짐


-- 숫자 조건
select * from product where price >= 2000;

-- (Q) 2000원 이상 3000원 이하의 상품을 조회
select * from product where price >= 1000 and price <= 2000;
select * from product where price BETWEEN 1000 and 2000;

-- (Q) 7번 상품 정보를 조회
select * from product where no = 7;

-- (Q) 11, 13, 15번 상품 정보를 조회
select * from product where no = 11 or no = 13 or no 15;
select * from product where no in (11, 13, 15);

-- 문자 조건
-- 문자도 부등호 사용이 가능하지만 잘 안씀
-- 일치하는지 비슷한지로 조회하는 경우가 많다

-- (ex) 아이스크림 조회
select * from product where type = '아이스크림';
-- (ex) 아이스크림을 제외하고 조회
select * from product where type != '아이스크림';
-- (Q) 아이스크림과 과자 조회
select * from product where type in ('아이스크림', '과자');
-- (ex) 상품명이 '오'로 시작하는 정보를 조회
-- [1] LIKE 검색 - 지정한 패턴을 찾는 검색 방식 (시작검색 특화)
SELECT * FROM product where name LIKE '오%';
-- [2] INSTR 함수 - 자바의 indexOf() 처럼 위치를 찾는 방식 (전반적으로 무난)
select * from product where instr(name, '오') = 1;

-- (Q) '이' 가 상품명에 포함된 상품 조회
select * from product where name Like '%이%';
SELECT * FROM product where instr(name, '이') >0;
-- (Q) '이' 로 상품명이 끝나는 상품 조회
SELECT * FROM product where name Like '%이';
SELECT * FROM product where instr(name, '이')=LENGTH(name);

-- 정규표현식을 조건에 사용 : regexp_like
select * from product where regexp_like(name, '(초코|버터)');

-- 날짜 조건
-- 비교가 가능하다(어제보다 오늘이 큼)
-- 문자열처럼 조회도 가능하다
-- 날짜 전용 명령도 존재

-- (ex) 2022년에 생산된 제품 조회
-- [1] 제조년도가 2022인 제품 조회
SELECT * from product where extract(year from made) = 2022;
-- [2] 제조일자가 2022로 시작(비추천)
select * from product where made like '22%';
-- [3] 제조일자가 2022-01-01 ~ 2022-12-31인 제품 조회
SELECT * FROM product where 
made >= to_date('2022-01-01 00:00:00', 'yyyy-mm-dd HH24:mi:ss')
and 
made <= to_date('2022-12-31 23:59:59', 'yyyy-mm-dd hh24:mi:ss');

-- (Q) 여름에 제조한 상품 목록 조회
--select * FROM product where made between to_date('06-01 00:00:00', 'mm-dd hh24:mi:ss')
--and to_date('08-31 23:59:59', 'mm-dd hh24:mi:ss');
SELECT * FROM product where extract(month from made) in (6, 7, 8) ;

-- (추가) 날짜를 문자열로 바꿀 수 있다 (to_char 함수)
select * from product
where to_char(made, 'mm') in ('06', '07', '08');

-- (Q) 2023년 하반기에 제조한 상품 목록 조회
SELECT * FROM product where extract(month from made) > 6 and EXTRACT(year from made) = 2023 ;
select * from product WHERE 
to_char(made, 'yyyy-mm') in ('2023-08', '2023-09', '2023-10', '2023-11', 
'2023-12', '2023-07');

-- (Q) 2023년부터 현재까지 제조한 상품 목록 조회
SELECT * FROM product where made BETWEEN to_date('2023', 'yyyy') and SYSDATE;

-- (추가) 최근 1년간 제조한 상품 조회
SELECT * FROM product where made BETWEEN sysdate-365 and SYSDATE;

-- 정렬(order by)
-- 데이터를 원하는 순서대로 나열하는 것
-- asc(ascending, 오름차순), desc(descending, 내림차순)
-- 콤마(,)를 이용하여 정렬방식을 계속 지정할 수 있음

SELECT * from product order by no asc; --번호 오름차순
SELECT * from product order by no desc; --번호 내림차순

select * from PRODUCT order by price asc, no asc;

-- (Q) 상품을 최신 제조순으로 출력
SELECT *FROM product order by made desc;

-- (Q) 상품을 이름 순으로 출력
select * from product order by name asc;

-- (Q) 상품을 유통기간이 짧은 순으로 출력
select * from product order by (EXPIRE - made) asc;

SELECT product.*, expire-made from PRODUCT 
order by expire-made asc, no asc;

-- (ex) 가격이 2천원 이상인 제품들을 저렴한 가격순으로 출력
SELECT * from product 
where price >= 2000
order by price asc, no asc;













