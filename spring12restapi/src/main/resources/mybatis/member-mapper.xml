<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="member">
	
	<!-- 
		데이터 조회(Read)
		1. 전체조회
		2. 상세조회
		3. 검색
			- column & keyword 검색 (정적바인딩, 동적바인딩)
			- 복합 검색 (모든 항목이 있을 수도 없을 수도 있는 검색)
	-->
	<select id="list" resultType="MemberDto">
		select * from member
	</select>
	<select id="search" resultType="MemberDto">
		select * from member where instr(${column}, #{keyword}) > 0
	</select>
	
	<!-- 조건을 이용하여 list와 search를 합쳐보자! -->
	<select id="listSearch" resultType="MemberDto">
		select * from member
		<if test="column != null and keyword != null">
		where instr(${column}, #{keyword}) > 0
		</if>
	</select>
	
	
	<!-- 
		복합 검색(complex search)
		- 다양한 항목들이 있거나 없을 수 있다는 전제조건 하에 구현하는 검색
		- 꼭 컬럼명이 아니더라도 여러 가지 형태로 개조하여 사용할 수 있다	 
	-->
	<select id="complexSearch" resultType="MemberDto">
		
		<!-- top-n-header 자리 -->
		<include refid="top-n-header"></include>
	
		select * from member
		<!-- 
			조건절을 태그로 만들어서 조건이 존재할 때만 where가 등장하도록 처리
			모든 조건은 and 또는 or로 시작해야 한다 
		--> 
		<where>
			<!-- 아이디는 시작검사를 수행 -->
			<if test="memberId != null">
			and member_id like #{memberId} || '%'
			</if>
			<!-- 닉네임은 시작검사를 수행 -->
			<if test="memberNickname != null">
			and member_nickname like #{memberNickname} || '%'
			</if>
			<!-- 생년월일은 일치검사를 수행 -->
			<if test="memberBirth != null">
			and member_birth = #{memberBirth}
			</if>
			<!-- 연락처는 유사검색을 수행 -->
			<if test="memberContact != null">
			and instr(member_contact, #{memberContact}) > 0
			</if>
			<!-- 이메일은 유사검색을 수행 -->
			<if test="memberEmail != null">
			and instr(member_email, #{memberEmail}) > 0
			</if>
			
			<!-- 
				포인트는 최소(minMemberPoint), 최대(maxMemberPoint)로 구분
				- 둘 다 있으면 최소~최대 구간을 조회
				- 최소만 있으면 해당 값 이상을 조회
				- 최대만 있으면 해당 값 이하를 조회
			 -->
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
				and member_point between #{minMemberPoint} and #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
				<![CDATA[
				and member_point >= #{minMemberPoint}
				]]>
				</when>
				<when test="maxMemberPoint != null">
				<![CDATA[
				and member_point <= #{maxMemberPoint}
				]]>
				</when> 
			</choose>
			
			<!-- 
				가입일 구간검색
				- 날짜는 문자열로 전송이 되지만 DB에서는 날짜 형태로 존재(불일치)
				- to_date 또는 to_char 함수를 써서 형태를 보정해야함
				- 시간은 언급되지 않았기 때문에 적절하게 추가해주어야 함 
			-->
			<choose>
				<when test="beginMemberJoin != null and endMemberJoin != null">
				and (
					member_join between 
						to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') 
						and 
						to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				)
				</when>
				<when test="beginMemberJoin != null">
				<![CDATA[
				and member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberJoin != null">
				<![CDATA[
				and member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			
			<!-- 로그인 일시 구간검색(가입일과 동일하게 진행) -->
			<choose>
				<when test="beginMemberLogin != null and endMemberLogin != null">
				and (member_login between 
						to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						and 
						to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberLogin != null">
				<![CDATA[
				and member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberLogin != null">
				<![CDATA[
				and member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			
			<!-- 
				회원등급 검색
				- 체크박스를 통해 여러 개의 값이 리스트 형태로 전달된다고 가정
				- 리스트가 null이거나 비어있다면 작업을 수행하지 않음
				- collection에 반복 대상을 적고
				- item에 저장할 변수명을 적고
				- separator에 출력 사이사이에 추가될 글자를 적고
				- open에 시작 시 추가될 글자를 적고
				- close에 종료시 추가될 글자를 적는다!
			 -->
			<if test="memberLevelList != null and memberLevelList.size() > 0">
			and member_level in 
			<foreach item="memberLevel" collection="memberLevelList"
							open="(" separator="," close=")">
				#{memberLevel}
			</foreach>
			</if>
			
			<!-- 
				주소 검색
				- 우편번호, 기본주소, 상세주소를 or로 연결하여 유사검색
			 -->
			<if test="memberAddress != null">
			and (
				instr(member_post, #{memberAddress}) > 0
				or
				instr(member_address1, #{memberAddress}) > 0
				or
				instr(member_address2, #{memberAddress}) > 0
			)
			</if>
			
		</where>
		
		<!-- 
			정렬 추가
			- orderList라는 이름으로 정렬 구문이 전달
			- 구문이기 때문에 정적 할당을 써야 함($)
			- 정렬이 하나도 제시되지 않으면? PK로 정렬
		-->
		<choose>
			<when test="orderList != null and orderList.size() > 0">
				order by 
				<foreach item="orderItem" collection="orderList" separator=",">
					${orderItem}
				</foreach>
			</when>
			<otherwise>
				order by member_id asc
			</otherwise>
		</choose>
		
		<!-- top-n-footer 자리 -->
		<include refid="top-n-footer"></include>
				
	</select>
	
	<!-- 
		자주 사용하는(ex : Top N Query) 구문들을 보관해두고 불러서 사용
		- 구문의 조각은 <sql> 태그로 작성
		- 이 구문을 불러올 때는 <include>를 사용 
		- beginRow와 endRow가 있을 때만 구동되도록 설정
	-->
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
		select * from (
  			select rownum rn, TMP.* from(
  		</if>
	</sql>
	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
		 	)TMP
		)
		where rn between #{beginRow} and #{endRow}
		</if>
	</sql>
	
	<!-- 페이징을 위한 카운트 계산 구문 -->
	<select id="complexSearchCount" resultType="int">
		select count(*) from member
		<!-- 
			조건절을 태그로 만들어서 조건이 존재할 때만 where가 등장하도록 처리
			모든 조건은 and 또는 or로 시작해야 한다 
		--> 
		<where>
			<!-- 아이디는 시작검사를 수행 -->
			<if test="memberId != null">
			and member_id like #{memberId} || '%'
			</if>
			<!-- 닉네임은 시작검사를 수행 -->
			<if test="memberNickname != null">
			and member_nickname like #{memberNickname} || '%'
			</if>
			<!-- 생년월일은 일치검사를 수행 -->
			<if test="memberBirth != null">
			and member_birth = #{memberBirth}
			</if>
			<!-- 연락처는 유사검색을 수행 -->
			<if test="memberContact != null">
			and instr(member_contact, #{memberContact}) > 0
			</if>
			<!-- 이메일은 유사검색을 수행 -->
			<if test="memberEmail != null">
			and instr(member_email, #{memberEmail}) > 0
			</if>
			
			<!-- 
				포인트는 최소(minMemberPoint), 최대(maxMemberPoint)로 구분
				- 둘 다 있으면 최소~최대 구간을 조회
				- 최소만 있으면 해당 값 이상을 조회
				- 최대만 있으면 해당 값 이하를 조회
			 -->
			<choose>
				<when test="minMemberPoint != null and maxMemberPoint != null">
				and member_point between #{minMemberPoint} and #{maxMemberPoint}
				</when>
				<when test="minMemberPoint != null">
				<![CDATA[
				and member_point >= #{minMemberPoint}
				]]>
				</when>
				<when test="maxMemberPoint != null">
				<![CDATA[
				and member_point <= #{maxMemberPoint}
				]]>
				</when> 
			</choose>
			
			<!-- 
				가입일 구간검색
				- 날짜는 문자열로 전송이 되지만 DB에서는 날짜 형태로 존재(불일치)
				- to_date 또는 to_char 함수를 써서 형태를 보정해야함
				- 시간은 언급되지 않았기 때문에 적절하게 추가해주어야 함 
			-->
			<choose>
				<when test="beginMemberJoin != null and endMemberJoin != null">
				and (
					member_join between 
						to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS') 
						and 
						to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				)
				</when>
				<when test="beginMemberJoin != null">
				<![CDATA[
				and member_join >= to_date(#{beginMemberJoin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberJoin != null">
				<![CDATA[
				and member_join <= to_date(#{endMemberJoin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			
			<!-- 로그인 일시 구간검색(가입일과 동일하게 진행) -->
			<choose>
				<when test="beginMemberLogin != null and endMemberLogin != null">
				and (member_login between 
						to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						and 
						to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS'))
				</when>
				<when test="beginMemberLogin != null">
				<![CDATA[
				and member_login >= to_date(#{beginMemberLogin} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="endMemberLogin != null">
				<![CDATA[
				and member_login <= to_date(#{endMemberLogin} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
			</choose>
			
			<!-- 
				회원등급 검색
				- 체크박스를 통해 여러 개의 값이 리스트 형태로 전달된다고 가정
				- 리스트가 null이거나 비어있다면 작업을 수행하지 않음
				- collection에 반복 대상을 적고
				- item에 저장할 변수명을 적고
				- separator에 출력 사이사이에 추가될 글자를 적고
				- open에 시작 시 추가될 글자를 적고
				- close에 종료시 추가될 글자를 적는다!
			 -->
			<if test="memberLevelList != null and memberLevelList.size() > 0">
			and member_level in 
			<foreach item="memberLevel" collection="memberLevelList"
							open="(" separator="," close=")">
				#{memberLevel}
			</foreach>
			</if>
			
			<!-- 
				주소 검색
				- 우편번호, 기본주소, 상세주소를 or로 연결하여 유사검색
			 -->
			<if test="memberAddress != null">
			and (
				instr(member_post, #{memberAddress}) > 0
				or
				instr(member_address1, #{memberAddress}) > 0
				or
				instr(member_address2, #{memberAddress}) > 0
			)
			</if>
			
		</where>
	</select>
	
	<select id="find" resultType="MemberDto">
		select * from member where member_id = #{memberId}
	</select>
	
</mapper>